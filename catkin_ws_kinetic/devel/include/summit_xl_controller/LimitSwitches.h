// Generated by gencpp from file summit_xl_controller/LimitSwitches.msg
// DO NOT EDIT!


#ifndef SUMMIT_XL_CONTROLLER_MESSAGE_LIMITSWITCHES_H
#define SUMMIT_XL_CONTROLLER_MESSAGE_LIMITSWITCHES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace summit_xl_controller
{
template <class ContainerAllocator>
struct LimitSwitches_
{
  typedef LimitSwitches_<ContainerAllocator> Type;

  LimitSwitches_()
    : up(false)
    , down(false)  {
    }
  LimitSwitches_(const ContainerAllocator& _alloc)
    : up(false)
    , down(false)  {
  (void)_alloc;
    }



   typedef uint8_t _up_type;
  _up_type up;

   typedef uint8_t _down_type;
  _down_type down;




  typedef boost::shared_ptr< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> const> ConstPtr;

}; // struct LimitSwitches_

typedef ::summit_xl_controller::LimitSwitches_<std::allocator<void> > LimitSwitches;

typedef boost::shared_ptr< ::summit_xl_controller::LimitSwitches > LimitSwitchesPtr;
typedef boost::shared_ptr< ::summit_xl_controller::LimitSwitches const> LimitSwitchesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::summit_xl_controller::LimitSwitches_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace summit_xl_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'robotnik_msgs': ['/home/summit/catkin_ws_kinetic/src/dependencies/robotnik_msgs/msg'], 'summit_xl_controller': ['/home/summit/catkin_ws_kinetic/src/summit_xl_robot/summit_xl_controller/msg', '/home/summit/catkin_ws_kinetic/src/summit_xl_robot/summit_xl_controller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d014920df9acd91aa1e77d852f832f5";
  }

  static const char* value(const ::summit_xl_controller::LimitSwitches_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d014920df9acd91ULL;
  static const uint64_t static_value2 = 0xaa1e77d852f832f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "summit_xl_controller/LimitSwitches";
  }

  static const char* value(const ::summit_xl_controller::LimitSwitches_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool up\n\
bool down\n\
";
  }

  static const char* value(const ::summit_xl_controller::LimitSwitches_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.up);
      stream.next(m.down);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LimitSwitches_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::summit_xl_controller::LimitSwitches_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::summit_xl_controller::LimitSwitches_<ContainerAllocator>& v)
  {
    s << indent << "up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.up);
    s << indent << "down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.down);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUMMIT_XL_CONTROLLER_MESSAGE_LIMITSWITCHES_H
