// Generated by gencpp from file summit_xl_web/get_controller_optionsResponse.msg
// DO NOT EDIT!


#ifndef SUMMIT_XL_WEB_MESSAGE_GET_CONTROLLER_OPTIONSRESPONSE_H
#define SUMMIT_XL_WEB_MESSAGE_GET_CONTROLLER_OPTIONSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace summit_xl_web
{
template <class ContainerAllocator>
struct get_controller_optionsResponse_
{
  typedef get_controller_optionsResponse_<ContainerAllocator> Type;

  get_controller_optionsResponse_()
    : takeOver(false)
    , kinematicMode()
    , gearboxReduction(0.0)
    , diameterWheel(0.0)
    , motionOdometry()
    , motorsEncoder()
    , motorsEncoderFactor(0)
    , xWam()  {
    }
  get_controller_optionsResponse_(const ContainerAllocator& _alloc)
    : takeOver(false)
    , kinematicMode(_alloc)
    , gearboxReduction(0.0)
    , diameterWheel(0.0)
    , motionOdometry(_alloc)
    , motorsEncoder(_alloc)
    , motorsEncoderFactor(0)
    , xWam(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _takeOver_type;
  _takeOver_type takeOver;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _kinematicMode_type;
  _kinematicMode_type kinematicMode;

   typedef float _gearboxReduction_type;
  _gearboxReduction_type gearboxReduction;

   typedef float _diameterWheel_type;
  _diameterWheel_type diameterWheel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motionOdometry_type;
  _motionOdometry_type motionOdometry;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motorsEncoder_type;
  _motorsEncoder_type motorsEncoder;

   typedef int32_t _motorsEncoderFactor_type;
  _motorsEncoderFactor_type motorsEncoderFactor;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _xWam_type;
  _xWam_type xWam;




  typedef boost::shared_ptr< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct get_controller_optionsResponse_

typedef ::summit_xl_web::get_controller_optionsResponse_<std::allocator<void> > get_controller_optionsResponse;

typedef boost::shared_ptr< ::summit_xl_web::get_controller_optionsResponse > get_controller_optionsResponsePtr;
typedef boost::shared_ptr< ::summit_xl_web::get_controller_optionsResponse const> get_controller_optionsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace summit_xl_web

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c803d4442092d317a92118964b891b96";
  }

  static const char* value(const ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc803d4442092d317ULL;
  static const uint64_t static_value2 = 0xa92118964b891b96ULL;
};

template<class ContainerAllocator>
struct DataType< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "summit_xl_web/get_controller_optionsResponse";
  }

  static const char* value(const ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool takeOver\n\
string kinematicMode\n\
float32 gearboxReduction\n\
float32 diameterWheel\n\
string motionOdometry\n\
string motorsEncoder\n\
int32  motorsEncoderFactor\n\
string xWam\n\
\n\
";
  }

  static const char* value(const ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.takeOver);
      stream.next(m.kinematicMode);
      stream.next(m.gearboxReduction);
      stream.next(m.diameterWheel);
      stream.next(m.motionOdometry);
      stream.next(m.motorsEncoder);
      stream.next(m.motorsEncoderFactor);
      stream.next(m.xWam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct get_controller_optionsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::summit_xl_web::get_controller_optionsResponse_<ContainerAllocator>& v)
  {
    s << indent << "takeOver: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.takeOver);
    s << indent << "kinematicMode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.kinematicMode);
    s << indent << "gearboxReduction: ";
    Printer<float>::stream(s, indent + "  ", v.gearboxReduction);
    s << indent << "diameterWheel: ";
    Printer<float>::stream(s, indent + "  ", v.diameterWheel);
    s << indent << "motionOdometry: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motionOdometry);
    s << indent << "motorsEncoder: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motorsEncoder);
    s << indent << "motorsEncoderFactor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motorsEncoderFactor);
    s << indent << "xWam: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.xWam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUMMIT_XL_WEB_MESSAGE_GET_CONTROLLER_OPTIONSRESPONSE_H
