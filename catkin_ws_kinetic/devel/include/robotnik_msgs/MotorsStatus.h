// Generated by gencpp from file robotnik_msgs/MotorsStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/MotorStatus.h>
#include <robotnik_msgs/MotorStatus.h>
#include <robotnik_msgs/MotorStatus.h>
#include <robotnik_msgs/MotorStatus.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct MotorsStatus_
{
  typedef MotorsStatus_<ContainerAllocator> Type;

  MotorsStatus_()
    : flwStatus()
    , blwStatus()
    , frwStatus()
    , brwStatus()  {
    }
  MotorsStatus_(const ContainerAllocator& _alloc)
    : flwStatus(_alloc)
    , blwStatus(_alloc)
    , frwStatus(_alloc)
    , brwStatus(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _flwStatus_type;
  _flwStatus_type flwStatus;

   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _blwStatus_type;
  _blwStatus_type blwStatus;

   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _frwStatus_type;
  _frwStatus_type frwStatus;

   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _brwStatus_type;
  _brwStatus_type brwStatus;




  typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MotorsStatus_

typedef ::robotnik_msgs::MotorsStatus_<std::allocator<void> > MotorsStatus;

typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus > MotorsStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus const> MotorsStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::MotorsStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'robotnik_msgs': ['/home/summit/catkin_ws_kinetic/src/dependencies/robotnik_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2196337708357903c08b92eeb4a057f9";
  }

  static const char* value(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2196337708357903ULL;
  static const uint64_t static_value2 = 0xc08b92eeb4a057f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/MotorsStatus";
  }

  static const char* value(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorStatus flwStatus\n\
MotorStatus blwStatus\n\
MotorStatus frwStatus\n\
MotorStatus brwStatus\n\
\n\
\n\
================================================================================\n\
MSG: robotnik_msgs/MotorStatus\n\
string state\n\
string status\n\
string statusword\n\
string driveflags\n\
";
  }

  static const char* value(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flwStatus);
      stream.next(m.blwStatus);
      stream.next(m.frwStatus);
      stream.next(m.brwStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MotorsStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>& v)
  {
    s << indent << "flwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.flwStatus);
    s << indent << "blwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.blwStatus);
    s << indent << "frwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.frwStatus);
    s << indent << "brwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.brwStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUS_H
