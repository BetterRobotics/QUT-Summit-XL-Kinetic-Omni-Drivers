# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from summit_xl_web/set_controller_optionsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_controller_optionsRequest(genpy.Message):
  _md5sum = "c803d4442092d317a92118964b891b96"
  _type = "summit_xl_web/set_controller_optionsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool takeOver
string kinematicMode
float32 gearboxReduction
float32 diameterWheel
string motionOdometry
string motorsEncoder
int32  motorsEncoderFactor
string xWam
"""
  __slots__ = ['takeOver','kinematicMode','gearboxReduction','diameterWheel','motionOdometry','motorsEncoder','motorsEncoderFactor','xWam']
  _slot_types = ['bool','string','float32','float32','string','string','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       takeOver,kinematicMode,gearboxReduction,diameterWheel,motionOdometry,motorsEncoder,motorsEncoderFactor,xWam

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_controller_optionsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.takeOver is None:
        self.takeOver = False
      if self.kinematicMode is None:
        self.kinematicMode = ''
      if self.gearboxReduction is None:
        self.gearboxReduction = 0.
      if self.diameterWheel is None:
        self.diameterWheel = 0.
      if self.motionOdometry is None:
        self.motionOdometry = ''
      if self.motorsEncoder is None:
        self.motorsEncoder = ''
      if self.motorsEncoderFactor is None:
        self.motorsEncoderFactor = 0
      if self.xWam is None:
        self.xWam = ''
    else:
      self.takeOver = False
      self.kinematicMode = ''
      self.gearboxReduction = 0.
      self.diameterWheel = 0.
      self.motionOdometry = ''
      self.motorsEncoder = ''
      self.motorsEncoderFactor = 0
      self.xWam = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.takeOver))
      _x = self.kinematicMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.gearboxReduction, _x.diameterWheel))
      _x = self.motionOdometry
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motorsEncoder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.motorsEncoderFactor))
      _x = self.xWam
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.takeOver,) = _get_struct_B().unpack(str[start:end])
      self.takeOver = bool(self.takeOver)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinematicMode = str[start:end].decode('utf-8')
      else:
        self.kinematicMode = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.gearboxReduction, _x.diameterWheel,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motionOdometry = str[start:end].decode('utf-8')
      else:
        self.motionOdometry = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorsEncoder = str[start:end].decode('utf-8')
      else:
        self.motorsEncoder = str[start:end]
      start = end
      end += 4
      (self.motorsEncoderFactor,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.xWam = str[start:end].decode('utf-8')
      else:
        self.xWam = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.takeOver))
      _x = self.kinematicMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.gearboxReduction, _x.diameterWheel))
      _x = self.motionOdometry
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motorsEncoder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.motorsEncoderFactor))
      _x = self.xWam
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.takeOver,) = _get_struct_B().unpack(str[start:end])
      self.takeOver = bool(self.takeOver)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinematicMode = str[start:end].decode('utf-8')
      else:
        self.kinematicMode = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.gearboxReduction, _x.diameterWheel,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motionOdometry = str[start:end].decode('utf-8')
      else:
        self.motionOdometry = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorsEncoder = str[start:end].decode('utf-8')
      else:
        self.motorsEncoder = str[start:end]
      start = end
      end += 4
      (self.motorsEncoderFactor,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.xWam = str[start:end].decode('utf-8')
      else:
        self.xWam = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from summit_xl_web/set_controller_optionsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_controller_optionsResponse(genpy.Message):
  _md5sum = "e2cc9e9d8c464550830df49c160979ad"
  _type = "summit_xl_web/set_controller_optionsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool ret

"""
  __slots__ = ['ret']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ret

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_controller_optionsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ret is None:
        self.ret = False
    else:
      self.ret = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.ret))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _get_struct_B().unpack(str[start:end])
      self.ret = bool(self.ret)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.ret))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _get_struct_B().unpack(str[start:end])
      self.ret = bool(self.ret)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class set_controller_options(object):
  _type          = 'summit_xl_web/set_controller_options'
  _md5sum = 'a51599e3b48803a1fc4a68757b75ae38'
  _request_class  = set_controller_optionsRequest
  _response_class = set_controller_optionsResponse
